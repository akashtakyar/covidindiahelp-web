{"version":3,"sources":["modules/baseComponent.js","managers/history.js","modules/login/loginComponent.js","utility/index.js","modules/signup/signUpComponent.js","modules/column-cards/columnCardsComponents.js","modules/column-cards/index.js","modules/columns/navbar.js","modules/columns/coulumnsComponents.js","constants/index.js","managers/httpService.js","services/columns.js","modules/columns/index.js","modules/mainComponent.js","routes.js","reducers/user.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["BaseComponent","props","Component","history","createBrowserHistory","loginComponent","ToastService","new","place","duration","maxCount","require","Cookies","signUpComponent","ColumnCardComponent","responseData","map","ite","Card","className","CardContent","Typography","variant","verifyScore","description","ColumnCard","state","name","nameError","this","ColumnComponent","Option","Select","children","push","key","useState","selected","setSelected","gutter","style","backgroundColor","height","span","marginTop","marginLeft","background","color","size","defaultValue","onChange","value","getStates","width","xs","sm","md","lg","xl","borderRight","httpConstants","POST","PUT","GET","DELETE","APPLICATION_JSON","MULTIPART_FORM_DATA","APPLICATION_FORM_URLENCODED","IMAGE_PNG","httpService","method","headers","data","url","requestOptions","keepalive","body","JSON","stringify","fetch","then","response","ok","text","responseText","Promise","reject","parse","success","responseCode","message","statusText","err","catch","console","log","states","toadd","a","resolve","Coloumn","stateValue","Array","isArray","length","setState","selectedState","selectedTime","useStyles","makeStyles","root","marginRight","navbar","borderColor","mx10","dropdown","paddingRight","Main","classes","Container","disableGutters","maxWidth","Routes","muiTheme","getMuiTheme","exact","path","component","from","to","connect","user","initialState","isLoggedIn","loginFailure","deviceId","sessionToken","loading","isForgotPasswordSuccess","combineReducers","action","type","loggerMiddleware","createLogger","createStore","rootReducer","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","LIMBApp","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a1a6be3.chunk.js","sourcesContent":["//base class\nimport React, {Component} from \"react\";\n\nexport default class BaseComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n}","/**\n * Created by Ayush Kulshrestha on 18/09/2019.\n */\n\nimport { createBrowserHistory } from 'history';\n\n/**\n * The history library lets you easily manage session history anywhere JavaScript runs.\n * history abstracts away the differences in various environments and provides a minimal API\n * that lets you manage the history stack, navigate, and persist state between sessions.\n */\n\n\nexport const history = createBrowserHistory();\n","import React from 'react'\nimport {Column, Row} from \"simple-flexbox\";\nimport {Button} from \"@material-ui/core\";\nimport CustomInput from \"../../common/components/CustomInput\";\nimport {history} from \"../../managers/history\";\n\n\nfunction LoginForm(props) {\n    let {state, togglePassword, onChangeEvent, onLoginClicked} = props;\n    return (\n        <Column className=\"w-450 pt-5 align-items-center \" horizontal={'center'}>\n            <form onSubmit={onLoginClicked} className=\"w-100\">\n                <Row className=\"justify-content-center w-100 fs-28 fc-dark-slate-blue\">\n                    Sign in to your account\n                </Row>\n\n                <div className=\"fc-dark-slate-blue fs-15 mt-5\">Email Address</div>\n                <CustomInput id=\"email\" type=\"text\" value={state ? state.email : \"\"} onChange={onChangeEvent}\n                             error={state ? state.emailError : \"\"} className=\"fs-15 p-2 mt-1\"/>\n\n                <Row className=\"fs-15 mt-4 justify-content-between\">\n                    <div className=\"fc-dark-slate-blue\">Password</div>\n                    <div className=\"fc-blue cursor-pointer\" onClick={togglePassword}>\n                        {state && state.isPasswordVisible ? \"Hide Password\" : \"Show Password\"}\n                    </div>\n                </Row>\n                <CustomInput id=\"password\" type={state && state.isPasswordVisible ? \"text\" : \"password\"}\n                             value={state ? state.password : \"\"} onChange={onChangeEvent}\n                             error={state ? state.passwordError : \"\"} className=\"fs-15 p-2 mt-1\"/>\n\n                <Row vertical={'center'} className=\"my-3\">\n                    <input style={{width: '15px'}} id=\"isRememberMeSelected\" type=\"checkbox\"\n                           className=\"checkbox-border p-3\"/>\n                    <Column className=\"ml-2 fs-15 fc-blue-grey font-weight-normal\">Remember me</Column>\n                </Row>\n\n                <Button type='submit' className=\"bg-blue outline-none text-transform-capitalize\n                fc-white w-100 py-2 fs-17 my-3 cursor-pointer\">\n                    Log in\n                </Button>\n                <Row className=\"w-100 justify-content-center\">Not able to login?\n                    <a className=\"fc-blue\">Recover Password</a>\n                </Row>\n            </form>\n        </Column>\n    );\n}\n\nfunction HeaderComponent(props) {\n    return (\n        <Row vertical=\"center\" className=\"justify-content-between\">\n            <img src=\"/images/limb_logo.svg\" alt='limb' className=\"w-150\"/>\n            <Row vertical=\"center\">\n                <Column vertical=\"center\" className=\"fc-brownish-grey fs-15 px-2 py-1\">New user?</Column>\n                <Column vertical=\"center\" className=\"fc-blue br-4 b-1-blue fs-17 px-2 py-1 cursor-pointer\"\n                        onClick={() => history.replace(\"/sign-up\")}>\n                    Sign Up\n                </Column>\n            </Row>\n        </Row>\n    )\n}\n\nfunction loginComponent(props) {\n    return (\n        <Column horizontal={'center'} className=\"w-100 p-3 min-vh-100 h-100 justify-content-between\">\n            <Column className=\"w-100\">\n                {HeaderComponent(props)}\n                <Row horizontal=\"center\" className=\"w-100 my-5\">\n                    {LoginForm(props)}\n                </Row>\n            </Column>\n            <Column className=\"jc-center w-100 align-items-center fs-14 my-3\">\n                <div className=\"fc-warm-grey\">©2019 LIMB CRE. All Rights Reserved.</div>\n                <div className=\"fc-blue\">Privacy Policy</div>\n            </Column>\n        </Column>\n    );\n}\n\nexport default loginComponent;","import \"react-s-alert/dist/s-alert-default.css\";\nimport {history} from \"../managers/history\";\nimport swal from \"sweetalert\";\nimport Cookies from \"universal-cookie\";\nimport React from \"react\";\nimport ToastService from 'react-material-toast';\nimport aws from \"aws-sdk\";\n\nconst toast = ToastService.new({\n    place: 'topRight',\n    duration: 1,\n    maxCount: 2\n});\nlet moment = require('moment');\nconst cookies = new Cookies();\nconst utility = {\n    getHeader,\n    apiFailureToast,\n    apiSuccessToast,\n    getAddedByObject,\n    getCompanyObject,\n    generateGUID,\n    basicAlert,\n    getActivityDateEpochRange,\n    getMiniAwardNominationModel,\n    getAddress,\n    decodeBase64,\n    validationAlert,\n    isNumber,\n    trackEvent,\n    navigateToPath,\n    toggleDropDown,\n    validateName,\n    validateEmail,\n    isEmpty,\n    isMenuActive,\n    isPasswordValid,\n    getSignedUrl,\n    uploadFileToS3,\n    showUnderDevelopment,\n    epochToDate,\n    getDateAfterOneYear,\n    generateCompanyLogoKey,\n    dateCompare,\n    isCompanyBalanceLow,\n    getMiniUserModel,\n    getMiniRecognitionUserModel,\n    getTimeFromNow,\n    epocToPrettyTime,\n    epocToPrettyTimeForFuture,\n    getLeaderBoardAggregatedQuery,\n    getTopSenderAggregatedQuery,\n    getTimeDifference,\n    getYearsList,\n    getTimestampFromDate,\n    extractDate,\n    secondsToTime,\n    getDateFormat,\n    changeDateFormat,\n    getAggregatedPercWercQueryObject\n};\nexport default utility;\n\n\nexport const dispatchAction = (type, data) => {\n    return dispatch => dispatch({type, data});\n};\n\nfunction trackEvent(event, eventData) {\n    // try {\n    //     if (!eventData)\n    //         mixpanel.track(event);\n    //     else\n    //         mixpanel.track(event, eventData);\n    // } catch (err) {\n    //     console.log(err)\n    // }\n}\n\nfunction getDateFormat() {\n    var my_date = new Date(2019, 0, 31);\n    console.log(my_date.toLocaleDateString());\n    // Initialize variables\n    var separator = \"\";\n    var first = \"\";\n    var second = \"\";\n    var third = \"\";\n    var date_parts = [];\n\n    // get separator : \"-\", \"/\" or \" \", format based on toLocaleDateString function\n    if (my_date.toLocaleDateString().split(\"-\").length == 3) {\n        separator = \" - \";\n        date_parts = my_date.toLocaleDateString().split(\"-\");\n    }\n    if (my_date.toLocaleDateString().split(\"/\").length == 3) {\n        separator = \" / \";\n        date_parts = my_date.toLocaleDateString().split(\"/\");\n    }\n    if (my_date.toLocaleDateString().split(\" \").length == 3) {\n        separator = \" \";\n        date_parts = my_date.toLocaleDateString().split(\" \");\n    }\n\n    // get first part\n    if (date_parts[0] == 2019) {\n        first = \"YYYY\";\n    } else if (date_parts[0] == 31) {\n        first = \"DD\";\n    } else {\n        if (date_parts[0].length <= 2) {\n            first = \"MM\";\n        } else {\n            first = \"MMM\";\n        }\n    }\n\n    // get second part\n    if (date_parts[1] == 2019) {\n        second = \"YYYY\";\n    } else if (date_parts[1] == 31) {\n        second = \"DD\";\n    } else {\n        if (date_parts[1].length <= 2) {\n            second = \"MM\";\n        } else {\n            second = \"MMM\";\n        }\n    }\n\n    // get third part\n    if (date_parts[2] == 2019) {\n        third = \"YYYY\";\n    } else if (date_parts[2] == 31) {\n        third = \"DD\";\n    } else {\n        if (date_parts[2].length <= 2) {\n            third = \"MM\";\n        } else {\n            third = \"MMM\";\n        }\n    }\n    // assembly\n    var format = first + \"/\" + second + \"/\" + third;\n    return format;\n}\n\n\nfunction getHeader() {\n    // return {\n    //     'session-token': sessionManager.getDataFromCookies(genericConstants.COOKIES_KEY.SESSION_TOKEN),\n    //     'device-id': sessionManager.getDataFromCookies(genericConstants.COOKIES_KEY.DEVICE_ID),\n    //     'Content-Type': httpConstants.CONTENT_TYPE.APPLICATION_JSON\n    // };\n}\n\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n//TODO: update apiConstant.API_FAILURE\nfunction apiFailureToast(message) {\n    toast.error(message ? message : \"apiConstant.API_FAILURE\");\n}\n\nfunction apiSuccessToast(msg) {\n    toast.success(msg ? msg : \"apiConstant.API_SUCCESS\");\n}\n\nfunction generateGUID() {\n    var nav = window.navigator;\n    var screen = window.screen;\n    var guid = nav.mimeTypes.length;\n    guid += nav.userAgent.replace(/\\D+/g, '');\n    guid += nav.plugins.length;\n    guid += screen.height || '';\n    guid += screen.width || '';\n    guid += screen.pixelDepth || '';\n    return guid;\n}\n\nfunction basicAlert(message) {\n    swal({\n        title: message,\n        icon: '/images/alert-icon.png',\n    })\n}\n\nfunction validationAlert(message, type = 'info') {\n    swal({\n        title: message,\n        icon: type\n    })\n}\n\nfunction getTimeDifference(timeStampTo) {\n    let minFive = 300000;\n    let oneDay = 86400000;\n    let difference = \"\";\n    let am = \" AM\";\n    let pm = \" PM\";\n    let hh = epochToDate(timeStampTo, 'hh');\n    let mm = epochToDate(timeStampTo, 'mm');\n    let dateFormat = epochToDate(timeStampTo, 'DD MMM YYYY');\n    let hours = new Date(timeStampTo).getHours();\n    let timeDifference = new Date().getTime() - timeStampTo;\n    if (timeDifference < oneDay) {\n        if (timeDifference < minFive) {\n            difference = \"Just Now\";\n        } else {\n            if (hours < 12)\n                difference = \"Today at \" + hh + \":\" + mm + am;\n            else\n                difference = \"Today at \" + hh + \":\" + mm + pm;\n        }\n    } else {\n        if (hours < 12)\n            difference = dateFormat + \", \" + hh + ':' + mm + am;\n        else\n            difference = dateFormat + \", \" + hh + ':' + mm + pm;\n    }\n    return difference;\n}\n\nfunction epochToDate(timeStamp, timeFormat) {\n    timeStamp = Math.floor(timeStamp);  //to convert to integer if seconds is String.\n    let dateObject = new Date(timeStamp);\n    return moment(dateObject).format(timeFormat)//DD MMM YYYY\n}\n\n\nfunction getTimeFromNow(timeStamp) {\n    return moment(timeStamp, \"YYYYMMDD\").fromNow();\n}\n\nfunction dateCompare(timeStampFrom, timeStampTo) {\n    let diffTime = (timeStampFrom * 1000 - timeStampTo);\n    let diffDays = (diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n}\n\nfunction getDateAfterOneYear(timeStamp) {\n    timeStamp = Math.floor(timeStamp);  //to convert to integer if seconds is String.\n    let dateObject = new Date(timeStamp);\n    return moment(dateObject).add(1, 'years').valueOf();\n}\n\nfunction getActivityDateEpochRange(activityDate) {\n    let currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n    let startDayEpochOfCurrentWeek = moment().startOf('isoweek').unix() * 1000;\n    let startDayEpochOfCurrentMonth = moment().startOf('month').unix() * 1000;\n    let startDayEpochOfCurrentQuarter = moment().startOf('quarter').unix() * 1000;\n    let startDayEpochOfCurrentYear = moment().startOf('year').unix() * 1000;\n    let endDayEpochOfCurrentWeek = moment().endOf('isoweek').unix() * 1000;\n    let endDayEpochOfCurrentMonth = moment().endOf('month').unix() * 1000;\n    let endDayEpochOfCurrentQuarter = moment().endOf('quarter').unix() * 1000;\n    let endDayEpochOfCurrentYear = moment().endOf('year').unix() * 1000;\n    let day, start;\n    switch (activityDate) {\n        case \"Today\":\n            return {start: currentDate.getTime(), end: new Date().getTime()};\n        case \"Yesterday\":\n            day = new Date(currentDate);\n            day.setDate(currentDate.getDate() - 1);\n            return {start: day.getTime(), end: currentDate.getTime()};\n        case \"Last seven days\":\n            day = new Date(currentDate);\n            day.setDate(currentDate.getDate() - 7);\n            return {start: day.getTime(), end: currentDate.getTime()};\n        case \"Last fourteen days\":\n            day = new Date(currentDate);\n            day.setDate(currentDate.getDate() - 14);\n            return {start: day.getTime(), end: currentDate.getTime()};\n        case \"Last twenty one days\":\n            day = new Date(currentDate);\n            day.setDate(currentDate.getDate() - 21);\n            return {start: day.getTime(), end: currentDate.getTime()};\n        case \"Last Week\":\n            start = new Date(startDayEpochOfCurrentWeek);\n            start.setDate(start.getDate() - 7);\n            return {start: start.getTime(), end: startDayEpochOfCurrentWeek};\n        case \"Last two weeks\":\n            start = new Date(startDayEpochOfCurrentWeek);\n            start.setDate(start.getDate() - 14);\n            return {start: start.getTime(), end: startDayEpochOfCurrentWeek};\n        case \"Last three weeks\":\n            start = new Date(startDayEpochOfCurrentWeek);\n            start.setDate(start.getDate() - 21);\n            return {start: start.getTime(), end: startDayEpochOfCurrentWeek};\n        case \"Last Month\":\n            start = new Date(startDayEpochOfCurrentMonth);\n            start.setMonth(start.getMonth() - 1);\n            return {start: start.getTime(), end: startDayEpochOfCurrentMonth};\n        case \"Last Quarter\":\n            start = new Date(startDayEpochOfCurrentQuarter);\n            start.setMonth(start.getMonth() - 3);\n            return {start: start.getTime(), end: startDayEpochOfCurrentQuarter};\n        case \"Last Year\":\n            console.log(startDayEpochOfCurrentYear)\n            start = new Date(startDayEpochOfCurrentYear);\n            start.setFullYear(start.getFullYear() - 1);\n            return {start: start.getTime(), end: startDayEpochOfCurrentYear};\n        case \"This Week\":\n            return {start: startDayEpochOfCurrentWeek, end: endDayEpochOfCurrentWeek};\n        case \"This Quarter\":\n            return {start: startDayEpochOfCurrentQuarter, end: endDayEpochOfCurrentQuarter};\n        case \"This Year\":\n            return {start: startDayEpochOfCurrentYear, end: endDayEpochOfCurrentYear};\n        case \"Current Month\":\n            return {start: startDayEpochOfCurrentMonth, end: endDayEpochOfCurrentMonth};\n        default:\n            return {start: currentDate.getTime(), end: new Date().getTime()};\n    }\n\n}\n\nfunction getAddress(addressObj) {\n    if (!addressObj || !Object.keys(addressObj).length || !(addressObj.addressLine1 || addressObj.poBoxNumber))\n        return \"\";\n    return (\n        <span>\n            {addressObj.addressLine1 ? addressObj.addressLine1 : `PO Box ${addressObj.poBoxNumber}`}<br/>\n            {addressObj.addressLine2 ? <span>{addressObj.addressLine2}<br/></span> : ''}\n            {addressObj.city}, {addressObj.state} {addressObj.zipCode}<br/>\n            {addressObj.country}\n        </span>\n    )\n}\n\nfunction decodeBase64(s) {\n    let e = {}, i, b = 0, c, x, l = 0, a, r = '', w = String.fromCharCode, L = s.length;\n    let A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for (i = 0; i < 64; i++) {\n        e[A.charAt(i)] = i;\n    }\n    for (x = 0; x < L; x++) {\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while (l >= 8) {\n            ((a = (b >>> (l -= 8)) & 0xff) || (x < (L - 2))) && (r += w(a));\n        }\n    }\n    return r;\n}\n\nfunction navigateToPath(path) {\n    history.push(path)\n}\n\nfunction toggleDropDown(dropdownID) {\n    // $(\"#\" + dropdownID).toggle(\"show\");\n}\n\nfunction validateName(name) {\n    let reg = /[A-Z][a-zA-Z]*/;\n    return reg.test(name)\n}\n\nfunction validateEmail(email) {\n    let reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return reg.test(email);\n}\n\nfunction isPasswordValid(password) {\n    let reg = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\n    return reg.test(password);\n}\n\nfunction isEmpty(string) {\n    return !string || string.trim().length === 0;\n}\n\nfunction isMenuActive(path) {\n    return window.location.pathname.includes(path);\n}\n\nfunction getAddedByObject(propsOfComponent) {\n    if (!propsOfComponent || !propsOfComponent.user || !propsOfComponent.user.userDetails)\n        return null;\n    let user = propsOfComponent.user.userDetails;\n    return {\n        privateKey: user.privateKey,\n        publicKey: user.publicKey,\n        email: user.email,\n        wercPlaceID: user.wercPlaceID,\n        photo: user.photo ? user.photo : '',\n        designation: user.designation ? user.designation : {},\n        department: user.department ? user.department : {},\n        name: (user.firstName || user.lastName) ? (user.firstName + \" \" + user.lastName) : (user.company && user.company.name ? user.company.name : \"\"),\n        _id: user._id\n    };\n}\n\nfunction getMiniUserModel(user) {\n    if (!user)\n        return null;\n    return {\n        privateKey: user.privateKey,\n        publicKey: user.publicKey,\n        photo: user.photo ? user.photo : '',\n        email: user.email,\n        wercPlaceID: user.wercPlaceID,\n        designation: user.designation ? user.designation : {},\n        department: user.department ? user.department : {},\n        name: (user.firstName || user.lastName) ? (user.firstName + \" \" + user.lastName) : user.company.name,\n        _id: user._id\n    };\n}\n\nfunction getMiniRecognitionUserModel(recognizeUser) {\n    if (!recognizeUser)\n        return null;\n    return {\n        name: recognizeUser.name,\n        clapWeight: recognizeUser.clapWeight,\n        _id: recognizeUser._id\n    };\n}\n\n\nfunction getMiniAwardNominationModel(nomination) {\n    if (!nomination)\n        return null;\n    return {\n        name: nomination.name,\n        photo: nomination.photo,\n        _id: nomination._id\n    };\n}\n\n\nfunction generateRandomAlphaNumericString(length) {\n    var randomAlphaNumericString = \"\";\n    var charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    for (var i = 0; i < length; i++)\n        randomAlphaNumericString += charset.charAt(Math.floor(Math.random() * charset.length));\n    return randomAlphaNumericString;\n}\n\nfunction generateCompanyLogoKey() {\n    var currentTimeStamp = (new Date().getTime()).toString();\n    return currentTimeStamp + \"_\" + generateRandomAlphaNumericString(13);\n}\n\nfunction uploadFileToS3(fileObject, fileName, mimeType, isPublic = false) {\n    let config = {\n        accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY,\n        secretAccessKey: process.env.REACT_APP_AWS_SECRET_KEY\n    }\n    aws.config.update(config);\n    console.log(\"config\", config);\n    console.log(\"fileObject\", fileObject);\n    const S3 = new aws.S3();\n    const params = {\n        Body: fileObject,\n        Bucket: process.env.REACT_APP_AWS_S3_BUCKET_NAME,\n        ContentType: mimeType,\n        Key: fileName\n    };\n    if (isPublic)\n        params.ACL = 'public-read';\n\n    return new Promise(function (resolve, reject) {\n        S3.upload(params, function (err, uploadData) {\n            if (err)\n                reject(err);\n            resolve(uploadData);\n        });\n    });\n}\n\nfunction getSignedUrl(fileName) {\n    if (!fileName)\n        return \"\";\n    aws.config.update({\n        accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY,\n        secretAccessKey: process.env.REACT_APP_AWS_SECRET_KEY\n    });\n    aws.config.region = process.env.REACT_APP_AWS_S3_BUCKET_REGION;\n    const s3 = new aws.S3();\n    const params = {\n        Bucket: process.env.REACT_APP_AWS_S3_BUCKET_NAME,\n        Key: fileName ? fileName : '',\n        Expires: 600000,\n    };\n    let signedUrl = s3.getSignedUrl('getObject', params);\n    return signedUrl;\n}\n\nfunction showUnderDevelopment() {\n    basicAlert(\"Under Development\")\n}\n\nfunction getCompanyObject(propsOfComponent) {\n    if (!propsOfComponent || !propsOfComponent.user || !propsOfComponent.user.userDetails || !propsOfComponent.user.userDetails.company)\n        return null;\n    return propsOfComponent.user.userDetails.company;\n}\n\nfunction isCompanyBalanceLow(company) {\n    if (!company || !company.tokenEconomy || !company.tokenEconomy) {\n        console.log('return false')\n        return false;\n    }\n    let remainingMonth = (new Date(company.tokenEconomy.endDate)).getMonth() - (new Date()).getMonth() +\n        (12 * ((new Date(company.tokenEconomy.endDate)).getFullYear() - (new Date()).getFullYear()));\n    if (company.tokenEconomy.PERCBalance < (company.tokenEconomy.monthlyPERCAllocation * remainingMonth))\n        return true;\n    return false;\n}\n\nfunction getYearsList(addedOn = new Date().getTime()) {\n    let durationList = [];\n    for (let i = new Date(addedOn).getFullYear(); i <= new Date().getFullYear(); i++) {\n        durationList.push(i)\n    }\n    return durationList;\n}\n\nfunction epocToPrettyTime(seconds) {\n    seconds = Math.floor(seconds);//to convert to integer if seconds is String.\n    var nowTimeMilliseconds = (new Date).getTime();\n    var date = new Date(seconds);\n    var dateObject = moment(date).format('DD MMMM YYYY');\n    //var dateObject = moment(date).format('ddd, MMM DD hh:mm A');\n    seconds = Math.floor((nowTimeMilliseconds / 1000) - (seconds / 1000));\n    var interval = Math.floor(seconds / 172800);\n    if (interval >= 1)\n        return dateObject;\n    //if (interval >= 1) return dateObject+\" \"+moment.tz(moment.tz.guess()).format('z');\n    interval = Math.floor(seconds / 86400);\n    if (interval >= 1)\n        return \"yesterday\";\n\n    interval = Math.floor(seconds / 3600);\n    if (interval >= 1) {\n        if (interval === 1)\n            return interval + \" hr ago\";\n        return interval + \" hrs ago\";\n    }\n    interval = Math.floor(seconds / 60);\n    if (interval >= 1) {\n        if (interval === 1)\n            return interval + \" minute ago\";\n        return interval + \" minutes ago\";\n    } else\n        return \"Just now\";\n}\n\nfunction epocToPrettyTimeForFuture(seconds) {\n    seconds = Math.floor(seconds);//to convert to integer if seconds is String.\n    var nowTimeMilliseconds = (new Date).getTime();\n    var date = new Date(seconds);\n    var dateObject = moment(date).format('DD MMMM YYYY');\n    //var dateObject = moment(date).format('ddd, MMM DD hh:mm A');\n    seconds = Math.floor((seconds / 1000) - (nowTimeMilliseconds / 1000));\n    var interval = Math.floor(seconds / 86400);\n    if (interval >= 1)\n        return interval + ' days';\n\n    interval = Math.floor(seconds / 3600);\n    if (interval >= 1) {\n        if (interval == 1)\n            return interval + \" hr\";\n        return interval + \" hrs\";\n    }\n    interval = Math.floor(seconds / 60);\n    if (interval >= 1) {\n        if (interval == 1)\n            return interval + \" minute\";\n        return interval + \" minutes\";\n    } else\n        return \"0 minute\";\n}\n\n\nfunction getLeaderBoardAggregatedQuery(propsOfComponent, skip = 0, limit = 0, matchObj = {}) {\n    if (!propsOfComponent || !propsOfComponent.user || !propsOfComponent.user.userDetails || !propsOfComponent.user.userDetails.company)\n        return null;\n    let queryObj = [];\n\n    //Match Object for the conditions-\n    let feedType = [];\n    feedType.push({'entityData.feedType': 'ADD_RECOGNITION'});\n    feedType.push({'entityData.feedType': 'ADD_NOMINATION'});\n    matchObj['$or'] = feedType;\n    matchObj['entityData.company.id'] = propsOfComponent.user.userDetails.company.id;\n\n    //addField Object for the conditions-\n    let addFieldObj = {\n        'recipient': {\n            '$arrayToObject': {\n                '$map': {\n                    'input': '$entityData.recipients',\n                    'as': 'recipients',\n                    'in': {'k': 'userDetails', 'v': '$$recipients'}\n                }\n            }\n        }\n    };\n\n    //Group object for grouping-\n    let groupObj = {};\n    groupObj._id = \"$entityData.recipients._id\";\n    groupObj.PERCBalance = {\"$sum\": \"$entityData.PERCValue\"};\n    groupObj.firstName = {\"$first\": \"$entityData.recipients.name\"};\n\n    queryObj.push({\"$match\": matchObj});\n    // queryObj.push({\"$addFields\": addFieldObj});\n    queryObj.push({\"$group\": groupObj});\n    queryObj.push({\"$sort\": {'PERCBalance': -1}});\n    queryObj.push({\"$limit\": limit});\n    queryObj.push({\"$skip\": skip});\n\n    return queryObj;\n}\n\nfunction getTopSenderAggregatedQuery(propsOfComponent, skip = 0, limit = 0, matchObj = {}) {\n    if (!propsOfComponent || !propsOfComponent.user || !propsOfComponent.user.userDetails || !propsOfComponent.user.userDetails.company)\n        return null;\n    let queryObj = [];\n\n    //Match Object for the conditions-\n    let feedType = [];\n    feedType.push({'entityData.feedType': 'ADD_RECOGNITION'});\n    feedType.push({'entityData.feedType': 'ADD_NOMINATION'});\n    matchObj['$or'] = feedType;\n    matchObj['entityData.company.id'] = propsOfComponent.user.userDetails.company.id;\n\n    //Group object for grouping-\n    let groupObj = {};\n    groupObj._id = \"$entityData.addedBy.email\";\n    groupObj.PERCBalance = {\"$sum\": \"$entityData.PERCValue\"};\n    groupObj.firstName = {\"$first\": \"$entityData.addedBy.name\"};\n\n    //Group object for grouping-\n    let sortObj = {};\n    sortObj._id = \"$recipient.userDetails.email\";\n\n    queryObj.push({\"$match\": matchObj});\n    queryObj.push({\"$group\": groupObj});\n\n    // queryObj.push({\"$sort\": {'PERCBalance':-1}});\n\n    queryObj.push({\"$limit\": limit});\n    queryObj.push({\"$skip\": skip});\n    queryObj.push({\"$sort\": {'PERCBalance': -1}});\n\n    return queryObj;\n}\n\nfunction secondsToTime(milliseconds) {\n    let date = new Date(milliseconds)\n    var duration = moment.duration(milliseconds, 'milliseconds');\n    return (duration.hours() + \":\" + duration.minutes() + \":\" + duration.seconds())\n    let dateObject = moment(date, 'hh:mm:ss').fromNow();\n    return dateObject\n\n    // let hours = Math.floor(secs / (60 * 60));\n    //\n    // let divisor_for_minutes = secs % (60 * 60);\n    // let minutes = Math.floor(divisor_for_minutes / 60);\n    //\n    // let divisor_for_seconds = divisor_for_minutes % 60;\n    // let seconds = Math.ceil(divisor_for_seconds);\n    //\n    // let obj = {\n    //     \"h\": hours,\n    //     \"m\": minutes,\n    //     \"s\": seconds\n    // };\n    // return obj;\n}\n\nfunction getTimestampFromDate(year, month, date = 0) {\n    let days = new Date(year, month, date).getDate();\n    return new Date(year + \"/\" + month + \"/\" + days).getTime();\n\n}\n\nfunction extractDate(date, getType) {\n    console.log(\"date\", typeof date, \"getType\", getType);\n    switch (getType) {\n        case \"DAY\":\n            return new Date(date.toString()).getDate();\n            break;\n        case \"MONTH\":\n            return new Date(date.toString()).getMonth() + 1;\n            break;\n        case \"YEAR\":\n            return new Date(date.toString()).getFullYear();\n            break;\n        default :\n            return date;\n    }\n\n}\n\nfunction changeDateFormat(date, newFormat) {\n    let currentFormat = getDateFormat()\n    return moment(date, currentFormat).format(newFormat)\n}\n\nfunction getAggregatedPercWercQueryObject(start, end, skip, id) {\n    console.log(start, end, skip, id);\n    return [\n        {\n            \"$match\": {\n                \"$and\": [\n                    {\n                        \"date\": {\n                            \"$gte\": start.toString()\n                        }\n                    },\n                    {\n                        \"date\": {\n                            \"$lte\": end.toString()\n                        }\n                    }\n                ],\n                \"companyId\": id.toString()\n            }\n\n        },\n        {\n            \"$skip\": skip\n        }\n    ];\n}\n","import React from 'react'\nimport {Column, Row} from \"simple-flexbox\";\nimport {Button} from \"@material-ui/core\";\nimport CustomInput from \"../../common/components/CustomInput\";\nimport {history} from \"../../managers/history\";\nimport Divider from \"@material-ui/core/Divider/Divider\";\n\n\nfunction SubscriptionTypeComponent(props) {\n    return (\n        <div\n            className=\"p-3 cursor-pointer fc-dark-slate-blue text-center m-3 w-250 bg-white b-1-white subscription-plan-card-shadow z-index-100 br-4\">\n            <div className=\"fs-20 font-weight-bold\">Loan Seller</div>\n            <div className=\"fs-15 my-3\">Create, transfer, sell and\n                publish Loan Data Records\n                on Blockchain\n            </div>\n            <img/>\n            <Button className=\"my-3 bg-blue px-2 fc-white fs-17 outline-none text-transform-capitalize\">\n                Buy this plan\n            </Button>\n        </div>\n    );\n}\n\nfunction SubscriptionPlanComponent(props) {\n    let {state, togglePassword, onChangeEvent, onLoginClicked} = props;\n    return (\n        <Column className=\"align-items-center my-5\" horizontal={'center'}>\n            <div className=\"w-100 fs-28 text-center fc-dark-slate-blue\">\n                LIMB CRE Plans for your Business\n            </div>\n            <div className=\"w-100 fs-20 text-center fc-dusky-blue\">\n                Select a plan to match your company type\n            </div>\n            <Row className=\"mt-4\">\n                {SubscriptionTypeComponent(props)}\n                {SubscriptionTypeComponent(props)}\n                {SubscriptionTypeComponent(props)}\n                {SubscriptionTypeComponent(props)}\n            </Row>\n        </Column>\n    );\n}\n\nfunction SignUpForm(props) {\n    let {state, togglePassword, onChangeEvent, onLoginClicked} = props;\n    return (\n        <Column className=\"w-450 pl-5 ml-3 border-left py-3 my-3 align-items-center fc-dark-slate-blue\"\n                horizontal={'center'}>\n            <form onSubmit={onLoginClicked} className=\"w-100\">\n\n                <label className=\"text-left w-100 fs-20\"><span\n                    className='font-weight-bold'>Create your account</span> (all field required)</label>\n\n                <div className=\"fs-15 mt-3 font-weight-bold\">Full Name</div>\n                <CustomInput id=\"name\" type=\"text\" value={state ? state.name : \"\"} onChange={onChangeEvent}\n                             error={state ? state.nameError : \"\"} className=\"fs-15 p-2 mt-1\"/>\n\n                <div className=\"fs-15 mt-2 font-weight-bold \">Email Address</div>\n                <CustomInput id=\"email\" type=\"text\" value={state ? state.email : \"\"} onChange={onChangeEvent}\n                             error={state ? state.emailError : \"\"} className=\"fs-15 p-2 mt-1\"/>\n\n                <Row className=\"fs-15 mt-2 font-weight-bold\">Password</Row>\n                <CustomInput id=\"password\" type={\"password\"} value={state ? state.password : \"\"}\n                             onChange={onChangeEvent} error={state ? state.passwordError : \"\"}\n                             className=\"fs-15 p-2 mt-1\"/>\n\n                <Row className=\"fs-15 mt-2 font-weight-bold\">Confirm Password</Row>\n                <CustomInput id=\"confirmPassword\" type={\"password\"} value={state ? state.confirmPassword : \"\"}\n                             onChange={onChangeEvent} error={state ? state.confirmPasswordError : \"\"}\n                             className=\"fs-15 p-2 mt-1\"/>\n\n                <Button type='submit' className=\"bg-blue outline-none text-transform-capitalize\n                fc-white w-100 py-2 fs-17 mt-4 cursor-pointer\">\n                    Continue\n                </Button>\n                <div className=\"w-100 text-left fs-15 my-1\">By clicking on continue, you agree to the LIMB CRE\n                    <a className=\"fc-blue\"> Terms of Service </a>\n                    and <a className=\"fc-blue\">Privacy Policy.</a>\n                </div>\n            </form>\n        </Column>\n    );\n}\n\nfunction SelectedSubscriptionComponent(props) {\n    return (\n        <div\n            className=\"p-3 mx-3 cursor-pointer fc-dark-slate-blue text-center m-3 w-250 bg-white\">\n            <div className=\"fs-20 font-weight-bold\">Loan Seller</div>\n            <div className=\"fs-15 my-3\">Create, transfer, sell and\n                publish Loan Data Records\n                on Blockchain\n            </div>\n            <img/>\n            <Button className=\"my-3 bg-blue px-2 fc-white fs-17 outline-none text-transform-capitalize\">\n                Buy this plan\n            </Button>\n        </div>\n    );\n}\n\nfunction SignUpComponent(props) {\n    let {state, togglePassword, onChangeEvent, onLoginClicked} = props;\n    return (\n        <Row className=\"align-items-center my-5\" horizontal={'center'}>\n            {SelectedSubscriptionComponent(props)}\n            {SignUpForm(props)}\n        </Row>\n    );\n}\n\nfunction HeaderComponent(props) {\n    return (\n        <Row vertical=\"center\" className=\"justify-content-between w-100\">\n            <img src=\"/images/limb_logo.svg\" alt='limb' className=\"w-150\"/>\n            <Row vertical=\"center\">\n                <Column vertical=\"center\" className=\"fc-brownish-grey fs-15 px-2 py-1\">Existing user?</Column>\n                <Column vertical=\"center\" className=\"fc-blue br-4 b-1-blue fs-17 px-2 py-1 cursor-pointer\"\n                        onClick={() => history.replace(\"/\")}>\n\n                    Log in</Column>\n            </Row>\n        </Row>\n    )\n}\n\nfunction signUpComponent(props) {\n    return (\n        <Column horizontal={'center'} className=\"w-100 p-3 min-vh-100\">\n            {HeaderComponent(props)}\n            {/*{SubscriptionPlanComponent(props)}*/}\n            {SignUpComponent(props)}\n        </Column>\n    );\n}\n\nexport default signUpComponent;","import React from 'react'\nimport './column-cards.css'\nimport 'antd/dist/antd.css';\nimport { Avatar, Card, CardContent, Typography } from '@material-ui/core';\n\nfunction ColumnCardComponent(props) {\n    return (\n        <>\n            {props.responseData && props.responseData.map(ite => (\n                <Card className=\"m-10\">\n                    <CardContent>\n                        <Typography className=\"mb-10\" variant=\"body2\">\n                            Verified On 23/4/21\n                                <span className=\"vote-count\">{ite.verifyScore}</span>\n                        </Typography>\n                        <Typography variant=\"body2\">{ite.description}</Typography>\n                    </CardContent>\n                </Card>\n            ))}\n        </>\n\n    );\n}\n\nexport default ColumnCardComponent;","import React from \"react\";\nimport BaseComponent from '../baseComponent'\nimport ColumnCardComponent from \"./columnCardsComponents\";\n\nclass ColumnCard extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            nameError: \"\",\n          \n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n  \n\n    render() {\n        return (\n            <ColumnCardComponent responseData={this.props.responseData} state={this.state} />\n        );\n    }\n}\n\nexport default ColumnCard;","import React, { useState } from 'react'\nimport { Row, Col } from 'antd';\nimport { Select, Radio } from 'antd';\nimport './column.css'\nfunction ColumnComponent(props) {\n    const { Option } = Select;\n    const children = [];\n    \n        children.push(<Option key={\"uttar\"}>{\"uttar\"}</Option>);\n        children.push(<Option key={\"delhi\"}>{\"delhi\"}</Option>);\n\n    const [selected  , setSelected ] = useState(\"delhi\")\n\n    function handleChange(value) {\n        setSelected(value)\n        props.getStates(value)\n    }\n    return (\n        <Row gutter={[24, 16]} style={{backgroundColor : \"#474951\" , height: \"68px\"}}>\n            <Col span={3}>\n                <Row style={{marginTop : \"20px\" , marginLeft : \"12px\"}}>\n                    <Select style={{background : \"#55575E\" , color : \"white\"}} size={\"medium\"} defaultValue={selected} onChange={handleChange} style={{ width: 150 }}>\n                        {children}\n                    </Select>\n                </Row>\n            </Col>\n            <Col span={3}>\n                <Row style={{marginTop : \"25px\"}}>\n                    <span className=\"bookmarked\">Leads</span>\n                </Row>\n            </Col>\n            <Col span={14}>\n                <Row style={{marginTop : \"25px\"}}>\n                    <span className=\"bookmarked\">Bookmarked</span>\n                </Row>\n            </Col>\n            <Col span={4}>\n                <Row style={{marginTop : \"25px\"}}>\n                    <span className=\"bookmarked\">Show data of last: 4 hours</span>\n                </Row>\n            </Col>\n        </Row>\n    );\n}\n\nexport default ColumnComponent;","import React, { useState } from 'react'\nimport { Row, Col } from 'antd';\nimport './column.css'\nimport 'antd/dist/antd.css';\nimport ColumnCard from '../column-cards';\nimport { CaretDownOutlined, CaretUpOutlined } from '@ant-design/icons';\nimport NavBar from './navbar'\nfunction ColumnComponent(props) {\n\n    const [blood, setBlood] = useState(true)\n    const [medicine, setMedicine] = useState(true)\n    const [rem, setrem] = useState(true)\n    const [toc, setToc] = useState(true)\n    const [ven, setVen] = useState(true)\n    const [oxy, setOxy] = useState(true)\n    const [bed, setBed] = useState(true)\n    const [icu, setIcu] = useState(true)\n\n    return (\n        <>\n            <NavBar getStates={props.getStates}/>\n            <Row style={{ height: \"1000px\" }}>\n\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }} >\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">Blood Plasma</span></Col>\n                        {/* <Col span={4}> {blood ? <CaretUpOutlined onClick={() => setBlood(false)} /> : <CaretDownOutlined onClick={() => setBlood(true)} />} </Col> */}\n                    </Row>\n                   \n                </Col>\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }} >\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">Medicine</span></Col>\n                        {/* <Col span={4}> {medicine ? <CaretUpOutlined onClick={() => setMedicine(false)} /> : <CaretDownOutlined onClick={() => setMedicine(true)} />} </Col> */}\n                    </Row>\n\n                </Col>\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }}>\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">Remdisvir</span></Col>\n                        {/* <Col span={4}> {rem ? <CaretUpOutlined onClick={() => setrem(false)} /> : <CaretDownOutlined onClick={() => setrem(true)} />} </Col> */}\n                    </Row>\n                </Col>\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }}>\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">Tocilizumab</span></Col>\n                        {/* <Col span={4}> {toc ? <CaretUpOutlined onClick={() => setToc(false)} /> : <CaretDownOutlined onClick={() => setToc(true)} />} </Col> */}\n                    </Row>\n                </Col>\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }}>\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">Ventilator</span></Col>\n                        {/* <Col span={4}> {ven ? <CaretUpOutlined onClick={() => setVen(false)} /> : <CaretDownOutlined onClick={() => setVen(true)} />} </Col> */}\n\n                    </Row>\n                </Col>\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }}>\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">Oxygen</span></Col>\n                        {/* <Col span={4}> {oxy ? <CaretUpOutlined onClick={() => setOxy(false)} /> : <CaretDownOutlined onClick={() => setOxy(true)} />} </Col> */}\n                    </Row>\n                    <Row>\n                        <ColumnCard responseData={props.responseData}></ColumnCard>\n                    </Row>\n                </Col>\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }}>\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">Bed</span></Col>\n                        {/* <Col span={4}> {bed ? <CaretUpOutlined onClick={() => setBed(false)} /> : <CaretDownOutlined onClick={() => setBed(true)} />} </Col> */}\n                    </Row>\n                </Col>\n                <Col xs={24} sm={12} md={4} lg={3} xl={3} style={{ borderRight: \"1px solid #D5D5D5\" }}>\n                    <Row style={{ marginTop: \"10px\" }}>\n                        <Col span={20}> <span className=\"oxygen-beds\">ICU</span></Col>\n                        {/* <Col span={4}> {icu ? <CaretUpOutlined onClick={() => setIcu(false)} /> : <CaretDownOutlined onClick={() => setIcu(true)} />} </Col> */}\n                    </Row>\n                </Col>\n            </Row>\n        </>\n\n    );\n}\n\nexport default ColumnComponent;","/**\n * Created by Ayush Kulshrestha on 18/09/2019.\n */\n\n\nexport const httpConstants = {\n    METHOD_TYPE: {\n        POST: 'POST',\n        PUT: 'PUT',\n        GET: 'GET',\n        DELETE: 'DELETE',\n    },\n    CONTENT_TYPE: {\n        APPLICATION_JSON: 'application/json',\n        MULTIPART_FORM_DATA: 'multipart/form-data',\n        APPLICATION_FORM_URLENCODED: 'application/x-www-form-urlencoded',\n        IMAGE_PNG: 'image/png'\n    },\n    DEVICE_TYPE: {\n        WEB: 'web'\n    },\n    API_END_POINT: {}\n};","import {httpConstants} from \"../constants\";\n\nexport const httpService = (method, headers, data, url) => {\n    const requestOptions = {\n        method: method,\n        keepalive: true,\n        headers: headers || {'Content-Type': 'application/json'}\n    };\n\n    if (method !== httpConstants.METHOD_TYPE.GET)\n        requestOptions.body = JSON.stringify(data);\n\n    return fetch(url, requestOptions)\n        .then(function handleResponse(response) {\n            //in case API is down-\n            if (!response || !response.ok)\n                return Promise.reject(\"Unable to fetch data\");\n            return response.text().then(responseText => {\n                if (!responseText)\n                    return Promise.reject(responseText);\n                let data;\n                try {\n                    data = typeof responseText === 'object' ? responseText : JSON.parse(responseText);\n                    if (data && !data.success)\n                        return Promise.reject((data && data.responseCode) === 404 ? data : (data && {\n                            message: data.message,\n                            responseCode: data.responseCode,\n                            responseData: data.responseData\n                        }) || response.statusText);\n\n                } catch (err) {\n                    return Promise.reject(err)\n                }\n                return data;\n            });\n        }).catch(function (err) {\n            console.log('Class: httpService, Function: fetch ==', err);\n            return Promise.reject(err);\n        })\n\n};\n","import {httpService} from \"../managers/httpService\";\nimport {httpConstants} from \"../constants\";\n\n\n\nexport default {\n    states\n}\n\n\nexport async function states(toadd){\n    let url = `https://d2ca3306ca42.ngrok.io/getCards?duration=200000&state=` + toadd;\n    return httpService(httpConstants.METHOD_TYPE.GET, {'Content-Type': httpConstants.CONTENT_TYPE.APPLICATION_JSON},{},url)\n        .then(response => {\n            console.log(\"response dasd\",response)\n                return Promise.resolve(response);\n            }\n        ).catch(function (err) {\n            console.log(\"err dasd\",err)\n            return Promise.reject(err);\n        });\n}\n","import React from \"react\";\nimport BaseComponent from '../baseComponent'\nimport CoulumnComponent from './coulumnsComponents'\nimport Utils from \"../../utility\";\nimport {states} from \"../../services/columns\"\n\nclass Coloumn extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            nameError: \"\",\n            selectedState: \"Delhi\",\n            selectedTime: \"4\",\n            responseData : []\n          \n        }\n    }\n\n     componentDidMount() {\n        this.getStates(\"delhi\")\n\n        console.log(\"===================compdiodi mount\")\n          \n    }\n   \n     getStates = async(stateValue) => {\n         let data = `${stateValue}`\n         \n        try{\n            let response = await states(data)\n            console.log(\"state respons\",response)\n            if(response.responseData && Array.isArray(response.responseData) && response.responseData.length){\n                this.setState({responseData : response.responseData})\n            }\n        }catch(error){\n            console.log(error)\n        }\n    \n     }\n  \n\n    render() {\n        return (\n            <CoulumnComponent state={this.state}\n            getStates={this.getStates}\n            responseData={this.state.responseData}\n                            />\n        );\n    }\n}\n\nexport default Coloumn;","import React from \"react\";\n// import { Route, Switch } from \"react-router-dom\";\n\n// Import material modules\nimport {\n    Container\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Navbar from \"../common/components/Navbar\";\nimport { Coloumn } from \".\";\n\nconst useStyles = makeStyles({\n    root: {\n        marginLeft: 0,\n        marginRight: 0\n    },\n    navbar: {\n        backgroundColor: '#333333',\n        Select: {\n            '&:before': {\n                borderColor: 'white',\n            },\n            '&:after': {\n                borderColor: 'white',\n            }\n        }\n    },\n    mx10: {\n        marginLeft: 10,\n        marginRight: 10\n    },\n    dropdown:{\n     '.& MuiSelect-outlined.MuiSelect-outlined':{     \n     paddingRight: '82px'\n     }\n    },\n  });\n\n  \nfunction Main() {\n    const classes = useStyles();\n\n    return (\n        <Container disableGutters=\"true\" maxWidth=\"xl\" className={classes.root}>\n            {/* <Navbar classes={classes} /> */}\n            <Coloumn />\n        </Container>\n    );\n}\n\nexport default Main;\n","import React from 'react';\nimport {Router, Route} from 'react-router-dom';\nimport {Redirect, Switch} from \"react-router\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport {connect} from \"react-redux\";\nimport {Coloumn} from \"./modules\";\nimport {history} from \"./managers/history\";\nimport BaseComponent from \"./modules/baseComponent\";\nimport Main from './modules/mainComponent';\n\nclass Routes extends BaseComponent {\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        return (\n\n            <MuiThemeProvider muiTheme={getMuiTheme()}>\n                <Router history={history}>\n                    <Switch>\n                        <Route exact path={'/'} component={Main}/>\n                   \n                        <Redirect exact from='*' to=\"/\"/>\n                        \n                    </Switch>\n                </Router>\n            </MuiThemeProvider>);\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {user: state.user}\n};\nexport default connect(mapStateToProps)(Routes);","let initialState = {\n    isLoggedIn: false,\n    loginFailure: null,\n    deviceId: null,\n    sessionToken: null,\n    loading: false,\n    isForgotPasswordSuccess: false\n};\nexport default function user(state = initialState, action) {\n    switch (action.type) {\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport user from \"./user\";\n\nexport default combineReducers({\n    user\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from \"./reducers/index\";\nconst loggerMiddleware = createLogger();\n\nexport default  createStore(\n    rootReducer,\n    applyMiddleware(\n        thunkMiddleware,\n        loggerMiddleware\n    )\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './routes';\nimport store from './store.js';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/custom.css';\n\n\nfunction LIMBApp() {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <Routes component={Routes}/>\n            </Provider>\n        </BrowserRouter>\n    );\n}\n\nReactDOM.render(<LIMBApp/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}